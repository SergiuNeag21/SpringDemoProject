/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.5/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
	id 'org.springframework.boot' version '3.2.1'
	id 'io.spring.dependency-management' version '1.1.4'
    id 'org.flywaydb.flyway' version '10.2.0'
    id 'jacoco'
    id("io.freefair.lombok") version "8.4"

}

repositories {
    // Use Maven Central for resolving de    // id 'org.flywaydb.flyway' version '10.4.1'pendencies.
    mavenCentral()
}


//implementation  for compiling the main source code
//testImplementation for compiling the test source code
//testRuntimeOnly needed only at runtime when executing tests
dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation libs.guava

    implementation("org.springframework.boot:spring-boot-starter-web")

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.postgresql:postgresql:42.6.0'

    implementation 'org.springframework.boot:spring-boot-starter-validation:3.2.0'

    // compileOnly 'org.projectlombok:lombok:1.18.22'
    // annotationProcessor 'org.projectlombok:lombok:1.18.22'

    // testImplementation 'ch.qos.logback:logback-classic:0.9.26'

    implementation "org.springframework.boot:spring-boot-starter-security"

    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    implementation 'org.flywaydb:flyway-core:10.4.1'
    implementation "org.flywaydb:flyway-database-postgresql:10.4.1"

    testImplementation 'com.h2database:h2:2.2.224'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.1'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.assertj:assertj-core:3.25.1'

    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    runtimeOnly 'org.postgresql:postgresql'

    testImplementation 'io.rest-assured:rest-assured:5.4.0'

    testImplementation 'org.springframework.security:spring-security-test'
}
    

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    // mainClass = "com.example.AppApplication"
    mainClass = "socialnetwork.App"
}



tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

flyway {
    url = 'jdbc:postgresql://localhost:5432/social_network'
    user = 'postgres'
    password = 'postgres'
    locations = ['classpath:db/migration'] // Specifică locația scripturilor de migrare
    baselineOnMigrate = true
}


ext {
    set('testcontainers.version', "1.19.3")
}